comment-box.txt        Clarify and beautify your comments using boxes and lines.


--------------------------------------------------------------------------------
                                                                     *comment-box*

   COMMENT-BOX

You have this long config file and you want to clearly (and beautifully)
separate each part. So you put lines of symbols as separators. Boxes would have
been better but too tedious to make, not to mention if you want to center your
text in it.

This plugin tries to remedy this by giving you easy boxes and lines the way you
want them to be.

================================================================================
CONTENTS                                                    *comment-box-contents*

    1. Overview.............................................|comment-box-overview|
    2. Prerequisite.....................................|comment-box-prerequisite|
    3. Installation.....................................|comment-box-installation|
    4. Usage...................................................|comment-box-usage|
        4.1. To put some text in a box.....|comment-box-to_put_some_text_in_a_box|
        4.2. To draw a line...........................|comment-box-to_draw_a_line|
        4.3. Keybindings examples...............|comment-box-keybindings_examples|
            5.3.1. Vim script:............................|comment-box-vim_script|
            5.3.2. Lua...........................................|comment-box-lua|
    5. The catalog...........................................|comment-box-catalog|
    6. Configuration and creating your own type of box.|comment-box-configuration|
        6.1. 'box_width'...................................|comment-box-box_width|
        6.2. 'borders'.......................................|comment-box-borders|
        6.3. 'line_width'.................................|comment-box-line_width|
        6.4. 'line'.............................................|comment-box-line|
        6.5. 'outer_blank_lines'...................|comment-box-outer_blank_lines|
        6.6. 'inner_blank_lines'...................|comment-box-inner_blank_lines|
        6.7. 'line_blank_line_above'...........|comment-box-line_blank_line_above|
        6.8  'line_blank_line_below'...........|comment-box-line_blank_line_below|
    7. Acknowledgement...............................|comment-box-acknowledgement|
    8. About...................................................|comment-box-about|
    9. License...............................................|comment-box-license|


--------------------------------------------------------------------------------
OVERVIEW                                                    *comment-box-overview*

comment-box allows you to:

*   draw a box around the selected text or actual line with a simple keyboard
    shortcut, the text is automatically wrap to fit the width of the box and can
    be centered,
*   create your own type of box by choosing its width and the characters used to
    draw the top, bottom, left, right and corners of it
*   draw a line with a simple keyboard shortcut,
*   create your own type of line by choosing its width and the characters used
    to draw its start, end and body,
*   choose from a catalog of 22 predefined boxes and 10 predefined lines and use
    it by simply pass its number to the function call.

Mainly designed for code comments, comment-box can also be used to brighten up
the dull .txt files! You can also use it in markdown and orgmode files, however,
if it makes sense if you use those formats "as is" (for note taking for
example), it's not a good idea if you plan to convert them to other formats.

--------------------------------------------------------------------------------
PREREQUISITE                                            *comment-box-prerequisite*

Neovim 0.5+

--------------------------------------------------------------------------------
INSTALLATION                                            *comment-box-installation*

Install like any other plugin with your favorite package manager.

For example with packer:
>
    use("LudoPinelli/comment-box.nvim")
<

If you're fine with the default settings (see |comment-box-configuration|), it's
all you have to do, however, comment-box does not come with any keybinding, see
|comment-box-keybindings_examples| to make your own.

--------------------------------------------------------------------------------
USAGE                                                          *comment-box-usage*

TO PUT SOME TEXT IN A BOX                  *comment-box-to_put_some_text_in_a_box*

Put your cursor on the line you want in a box, or select multiple lines, then
use one of the two functions provided:
>
    -- To draw a box with the text left justified:
    :lua require("comment-box").lbox()
    -- To draw a box with the text centered:
    :lua require("comment-box").cbox()
<

But you will probably want to use their syntactic sugar equivalent:
>
    -- To draw a box with the text left justified:
    :CBlbox
    -- To draw a box with the text centered:
    :CBcbox
<

Optionally, you can pass an argument to use one of the predefined type of boxes
of the catalog (see |comment-box-catalog|), for example:
>
    -- Use the box 17 of the catalog with the text left justified:
    :lua require("comment-box").lbox(17)
    -- or
    :CBlbox17
<

Note: if a line is too long to fit in the box, comment-box will automatically
wrap it for you.

TO DRAW A LINE                                        *comment-box-to_draw_a_line*

In normal or insert mode, use:
>
    :lua require("comment-box").line()
<

Its syntactic sugar equivalent:
>
    :CBline
<

Optionally, you can pass an argument to use one of the predefined type of lines
of the catalog (see |comment-box-catalog|), for example:
>
    -- Use the line 6 of the catalog:
    :lua require("comment-box").line(6)
    -- or
    :CBline6
<

KEYBINDINGS EXAMPLES                            *comment-box-keybindings_examples*

VIM SCRIPT:                                              *comment-box-vim_script:*
>
    nnoremap <Leader>bb <Cmd>lua require('comment-box').lbox()<CR>
    vnoremap <Leader>bb <Cmd>lua require('comment-box').lbox()<CR>
    nnoremap <Leader>bc <Cmd>lua require('comment-box').cbox()<CR>
    vnoremap <Leader>bc <Cmd>lua require('comment-box').cbox()<CR>
    nnoremap <Leader>bl <Cmd>lua require('comment-box').line()<CR>
    inoremap <M-l> <Cmd>lua require('comment-box').line()<CR>
<

LUA                                                              *comment-box-lua*
>
    local keymap = vim.api.nvim_set_keymap
    keymap("n", "<Leader>bb", "<Cmd>lua require('comment-box').lbox()<CR>", {})
    keymap("v", "<Leader>bb", "<Cmd>lua require('comment-box').lbox()<CR>", {})
    keymap("n", "<Leader>bc", "<Cmd>lua require('comment-box').cbox()<CR>", {})
    keymap("v", "<Leader>bc", "<Cmd>lua require('comment-box').cbox()<CR>", {})
    keymap("n", "<Leader>bl", "<Cmd>lua require('comment-box').line()<CR>", {})
    keymap("i", "<M-l>", "<Cmd>lua require('comment-box').line()<CR>", {})
<

Or if you use Neovim-nightly:
>
    local keymap = vim.keymap.set
    local cb = require("comment-box")
    keymap({ "n", "v"}, "<Leader>bb", cb.lbox, {})
    keymap({ "n", "v"}, "<Leader>bc", cb.cbox, {})
    keymap("n", "<Leader>bl", cb.line, {})
    keymap("i", "<M-l>", cb.line, {})
<

--------------------------------------------------------------------------------
THE CATALOG                                                  *comment-box-catalog*



The catalog is a collection of 22 predefined types of boxes and 10 types of
lines. You can easily access the catalog in Neovim (it will appear in a popup
window so it won't mess with what you're doing) using:
>
    :CBcatalog
    -- or
    :lua require("comment-box").catalog()
<

Just take note of the number of the type of box or line you want to use, close
the catalog and pass the number to the function. For example:
>
    -- A box with the text centered and the predefined type of box n°10:
    :CBcbox10
    -- or
    :lua require("comment-box").cbox(10)
    -- A line with the predefined type of line n°4:
    :CBline4
    -- or
    :lua require("comment-box").line(4)
<

Or if you found one (or more) you will frequently use, you may want to include
it in you keybindings.

Note: in addition to the usual way of closing windows, you can simply use `q` to
close the catalog.

The type n°1 for the box and line is the default one, so, if you didn't change
the default settings via the `setup()` function (see 
|comment-box-configuration|), passing nothing or 1 (or even 0) will lead to the
same result.

--------------------------------------------------------------------------------
CONFIGURATION AND CREATING YOUR OWN TYPE OF BOX        *comment-box-configuration*

You can call the `setup()` function in your init.lua(.vim) to configure the way
comment-box does its things. This is also where you can create your own type of
box. Here is the list of the options with their default value:
>
    require('comment-box').setup({
    	box_width = 70, -- width of the boxex
    	borders = { -- symbols used to draw a box
    		top = "─",
    		bottom = "─",
    		left = "│",
    		right = "│",
    		top_left = "╭",
    		top_right = "╮",
    		bottom_left = "╰",
    		bottom_right = "╯",
    	},
      line_width = 70, -- width of the lines
      line = { -- symbols used to draw a line
    		line = "─",
    		line_start = "─",
    		line_end = "─",
        }
      outer_blank_lines = false, -- insert a blank line above and below the box
      inner_blank_lines = false, -- insert a blank line above and below the text
      line_blank_line_above = false, -- insert a blank line above the line
      line_blank_line_below = false, -- insert a blank line below the line
    })
<

'box_width'                                                *comment-box-box_width*

Width of the boxes.

'borders'                                                    *comment-box-borders*

The symbols used to draw the boxes. Let your creativity go wild! Or just use the
default or choose from the predefined ones (see |comment-box-catalog|).

If you want an element of the box to be invisible, you can use either `" "`(space)
or `""`(empty string).

'line_width'                                              *comment-box-line_width*

Width of the lines.

'line'                                                          *comment-box-line*

The symbols used to draw the lines. Let your creativity go wild! Or just use the
default or choose from the predefined ones (see |comment-box-catalog|).

'outer_blank_lines'                                *comment-box-outer_blank_lines*

Insert blank lines outside the bow, above and below.

'inner_blank_lines'                                *comment-box-inner_blank_lines*

Insert blank lines inside the box, above and below the text.

'line_blank_line_above'                        *comment-box-line_blank_line_above*

Insert a blank line above the drawn line.

'line_blank_line_below'                        *comment-box-line_blank_line_below*

Insert a blank line below the drawn line.

--------------------------------------------------------------------------------
ABOUT                                                         *comment-box-about*

Find the latest version of comment-box at:
https://github.com/LudoPinelli/comment-box.nvim

--------------------------------------------------------------------------------
LICENSE                                                     *comment-box-license*

comment-box is released under the MIT License
https://mit-license.org/
