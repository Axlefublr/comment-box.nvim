comment-box.txt        Clarify and beautify your comments using boxes and lines.


--------------------------------------------------------------------------------
                                                                     *comment-box*

   COMMENT-BOX

You have this long config file and you want to clearly (and beautifully)
separate each part. So you put lines of symbols as separators. Boxes would have
been better but too tedious to make, not to mention if you want to center your
text in it.

This plugin tries to remedy this by giving you easy boxes and lines the way you
want them to be in any kind of plain text file.

================================================================================
CONTENTS                                                    *comment-box-contents*

    1. Overview.............................................|comment-box-overview|
    2. Prerequisite.....................................|comment-box-prerequisite|
    3. Installation.....................................|comment-box-installation|
    4. Usage...................................................|comment-box-usage|
        4.1. Commands.......................................|comment-box-commands|
            4.1.1 Boxes........................................|comment-box-boxes|
            4.1.2 Titled Lines..........................|comment-box-titled-lines|
            4.1.3 Lines........................................|comment-box-lines|
            4.1.4 Removing a box or a titled line.............|comment-box-remove|
            4.1.5 Yank the content of a box or titled line......|comment-box-yank|
        4.2. Keybindings examples...............|comment-box-keybindings_examples|
            5.3.1. Vim script:............................|comment-box-vim_script|
            5.3.2. Lua...........................................|comment-box-lua|
    5. The catalog...........................................|comment-box-catalog|
    6. Configuration and creating your own type of box.|comment-box-configuration|
        6.1. 'doc_width'...................................|comment-box-doc_width|
        6.2. 'box_width'...................................|comment-box-box_width|
        6.3. 'borders'.......................................|comment-box-borders|
        6.4. 'line_width'.................................|comment-box-line_width|
        6.5. 'line'.............................................|comment-box-line|
        6.6. 'outer_blank_lines'...................|comment-box-outer_blank_lines|
        6.7. 'inner_blank_lines'...................|comment-box-inner_blank_lines|
        6.8. 'line_blank_line_above'...........|comment-box-line_blank_line_above|
        6.9  'line_blank_line_below'...........|comment-box-line_blank_line_below|
    7. Acknowledgement...............................|comment-box-acknowledgement|
    8. About...................................................|comment-box-about|
    9. License...............................................|comment-box-license|


--------------------------------------------------------------------------------
OVERVIEW                                                    *comment-box-overview*

comment-box allows you to:

*   draw a box around the selected text or actual line with a simple keyboard
    shortcut. The box can be left aligned, right aligned or centered, can have
    a fixed size or be adapted to the text. The text can be left aligned, right
    aligned or centered. Too long text are automatically wrapped to fit in the
    box. the box can be removed at any time while keeping the text.
*   create your own type of box by choosing its width and the characters used to
    draw the top, bottom, left, right and corners of it
*   integrate your text in a drew line. The line can be left aligned, right
    aligned or centered. The text can be left aligned right aligned or centered.
    Too long text will be wrapped, the first line will be integrated in the
    line, the others will appear commented below the line.
*   draw a line with a simple keyboard shortcut. The line can be left aligned,
    right aligned or centered.
*   create your own type of line by choosing its width and the characters used
    to draw its start, end and body,
*   choose from a catalog of 22 predefined boxes and 10 predefined lines and use
    it by simply pass its number to the function call.

Mainly designed for code comments, comment-box can also be used to brighten up
the dull .txt files! You can also use it in markdown and orgmode files, however,
if it makes sense if you use those formats "as is" (for note taking for
example), it's not a good idea if you plan to convert them to other formats.

Note: multi-line commenting as used in C is quite tricky and not fully supported
yet.

--------------------------------------------------------------------------------
PREREQUISITE                                            *comment-box-prerequisite*

Neovim 0.8+

--------------------------------------------------------------------------------
INSTALLATION                                            *comment-box-installation*

Install like any other plugin with your favorite package manager.

For example with packer:
>
    use("LudoPinelli/comment-box.nvim")
<

With lazy:
>
    { "ludoPinelli/comment-box.nvim", }
<

If you're fine with the default settings (see |comment-box-configuration|), it's
all you have to do, however, comment-box does not come with any keybinding, see
|comment-box-keybindings_examples| to make your own.

--------------------------------------------------------------------------------
USAGE                                                          *comment-box-usage*

BOXES                                                          *comment-box-boxes*

+------------------------------------------------------------------------------+
|   Command    |      Description        |              function               |
+--------------+-------------------------+-------------------------------------+
|CBllbox[num]  | Left aligned fixed size | require("comment-box").llbox([num]) |
|              | box with left aligned   |                                     |
|              | text                    |                                     |
+--------------+-------------------------+-------------------------------------+
|CBlcbox[num]  | Left aligned fixed size | require("comment-box").lcbox([num]) |
|              | box with centered text  |                                     |
+--------------+-------------------------+-------------------------------------+
|CBlrbox[num]  | Left aligned fixed size | require("comment-box").lrbox([num]) |
|              | box with right aligned  |                                     |
|              | text                    |                                     |
+--------------+-------------------------+-------------------------------------+
|CBclbox[num]  | Centered fixed size box | require("comment-box").clbox([num]) |
|              | with left aligned text  |                                     |
+--------------+-------------------------+-------------------------------------+
|CBccbox[num]  | Centered fixed size box | require("comment-box").ccbox([num]) |
|              | with centered text      |                                     |
+--------------+-------------------------+-------------------------------------+
|CBcrbox[num]  | Centered fixed size box | require("comment-box").crbox([num]) |
|              | with right aligned text |                                     |
+--------------+-------------------------+-------------------------------------+
|CBrlbox[num]  | Right aligned fixed     | require("comment-box").rlbox([num]) |
|              | size box with left      |                                     |
|              | aligned text            |                                     |
+--------------+-------------------------+-------------------------------------+
|CBrcbox[num]  | Right aligned fixed     | require("comment-box").rcbox([num]) |
|              | size box with centered  |                                     |
|              | text                    |                                     |
+--------------+-------------------------+-------------------------------------+
|CBrrbox[num]  | Right aligned fixed     | require("comment-box").rrbox([num]) |
|              | size box with right     |                                     |
|              | aligned text            |                                     |
+--------------+-------------------------+-------------------------------------+
|CBalbox[num]  | Left aligned adapted    | require("comment-box").albox([num]) |
|              | box                     |                                     |
+--------------+-------------------------+-------------------------------------+
|CBacbox[num]  | Centered adapted box    | require("comment-box").acbox([num]) |
+------------------------------------------------------------------------------+
|CBarbox[num]  | Right aligned adapted   | require("comment-box").arbox([num]) |
|              | box                     |                                     |
+--------------+-------------------------+-------------------------------------+
|CBdbox        | Remove a box            | require("comment-box").dbox()       |
+--------------+-------------------------+-------------------------------------+
|CBy           | Yank the content of a   | require("comment-box").yank()       |
|              | box                     |                                     |
+--------------+-------------------------+-------------------------------------+

The [num] parameter is optional. It's the number of a predefined style from the
catalog (see |comment-box-catalog|). By leaving it empty, the box or line will be
drawn with the style you defined or if you didn't define one, with the default
style.

A 'centered' box is centered relatively to the width of your document (set to the
standard 80 by default, you can change it with the `setup()` function - see
|comment-box-configuration|). Same for 'right aligned' boxes.

An 'adapted' box means than the box width will be adapted to the width of the
text. However, if the width of the text exceed the width of the document, the box
will have the width of the document.
In case of multiple lines with various size, the text is aligned according to the
position of the box (left aligned if the box is left aligned, centered if the box
is centered, right aligned if the box is right aligned).

To draw a box, place your cursor on the line of text you want in a box, or select
multiple lines in visual mode, then use one of the command/function above.

Note: if the text is too long to fit in the box, comment-box will automatically
wrap it for you.

Examples
>
    -- A left aligned fixed size box with the text left justified:
    :CBllbox
    -- or
    :lua require("comment-box").llbox()

    -- A centered fixed size box with the text centered:
    :CBccbox
    -- or
    :lua require("comment-box").ccbox()

    -- A centered adapted box with the text centered:
    :CBaccbox
    -- or
    :lua require("comment-box").accbox()

    -- A left aligned fixed size box with the text left justified,
    -- using the syle 17 from the catalog:
    :CBllbox17
    -- or
    :lua require("comment-box").llbox(17)
<

TITLED LINES                                              *comment-box-titled-lines*

+------------------------------------------------------------------------------+
|   Command    |      Description       |               function               |
+--------------+------------------------+--------------------------------------+
|CBllline[num] | Left aligned titled    | require("comment-box").llline([num]) |
|              | line with left aligned |                                      |
|              | text                   |                                      |
+--------------+------------------------+--------------------------------------+
|CBlcline[num] | Left aligned titled    | require("comment-box").lcline([num]) |
|              | line with centered     |                                      |
|              | text                   |                                      |
+--------------+------------------------+--------------------------------------+
|CBlrline[num] | Left aligned titled    | require("comment-box").lrline([num]) |
|              | line with right        |                                      |
|              | aligned text           |                                      |
+--------------+------------------------+--------------------------------------+
|CBclline[num] | Centered titled line   | require("comment-box").clline([num]) |
|              | with left aligned text |                                      |
+--------------+------------------------+--------------------------------------+
|CBccline[num] | Centered titled line   | require("comment-box").ccline([num]) |
|              | with centered text     |                                      |
+--------------+------------------------+--------------------------------------+
|CBcrline[num] | Centered titled line   | require("comment-box").crline([num]) |
|              | with right aligned text|                                      |
+--------------+------------------------+--------------------------------------+
|CBrlline[num] | Right aligned titled   | require("comment-box").rlline([num]) |
|              | line with left aligned |                                      |
|              | text                   |                                      |
+--------------+------------------------+--------------------------------------+
|CBrcline[num] | Right aligned titled   | require("comment-box").rcline([num]) |
|              | line with centered     |                                      |
|              | text                   |                                      |
+--------------+------------------------+--------------------------------------+
|CBrrline[num] | Right aligned titled   | require("comment-box").rrline([num]) |
|              | line with right        |                                      |
|              | aligned text           |                                      |
+--------------+------------------------+--------------------------------------+

The [num] parameter is optional. It's the number of a predefined style from the
catalog (see |comment-box-catalog|). By leaving it empty, the box or line will be
drawn with the style you defined or if you didn't define one, with the default
style.

A 'centered' titled line is centered relatively to the width of your document
(set to the standard 80 by default, you can change it with the `setup()` function
- see |comment-box-configuration|). Same for 'right aligned' titled lines.

To draw a titled line, place your cursor on the line of text you want in, then
use one of the command/function above.

Note: if the text is too long to fit in the line, comment-box will automatically
wrap it for you. The first line of text will be in the line, the others will be
commented above it.

Examples
>
    -- A left aligned titled line with the text left justified:
    :CBllline
    -- or
    :lua require("comment-box").llline()

    -- A centered titled line with the text right jusrifiedd:
    :CBcrline
    -- or
    :lua require("comment-box").crline()

    -- A right aligned titled line with the text centered,
    -- using the syle 13 from the catalog:
    :CBrcline13
    -- or
    :lua require("comment-box").rcline(13)
<

REMOVING A BOX OR A TITLED LINE WHILE KEEPING THE TEXT        *comment-box-remove*

+------------------------------------------------------------------------------+
| Command |             Description            |           function            |
+---------+------------------------------------+-------------------------------+
| CBd     | Remove a box or titled line,       | require("comment-box").dbox() |
|         | keeping its content                |                               |
+---------+------------------------------------+-------------------------------+

To remove a box or a titled line, select it in visual mode, then use the
command CBd (or create a keybind for it, see|keybindings-examples)

YANK THE CONTENT OF A BOX OR A TITLED LINE                      *comment-box-yank*

+------------------------------------------------------------------------------+
| Command |             Description            |          function             |
+---------+------------------------------------|-------------------------------+
| CBy     | Yank the content of a box or       | require("comment-box").yank() |
|         | titled line                        |                               |
+---------+------------------------------------+-------------------------------+

Select the box (or at least the part including the text) or the titled line
in visual mode, then use the command CBy.
(Note that the text is available in the `+` register, it assumes that you have
the `clipboard` option set to `unnamedplus`. If not you will have to specify
the register for pasting using "+p).

LINES                                                          *comment-box-lines*

+------------------------------------------------------------------------+
|   Command   |    Description     |             function                |
+-------------+--------------------+-------------------------------------+
|CBline[num]  | Left aligned line  | require("comment-box").line([num])  |
|CBcline[num] | Centered line      | require("comment-box").cline([num]) |
|CBrline[num] | Right aligned line | require("comment-box").rline([num]) |
+------------------------------------------------------------------------+

To draw a line, place your cursor where you want it and in normal or insert mode,
use one of the command/function above.

Note: a line is centered or right aligned according to the width of your document
(set to the standard 80 by default, you can change it with the setup() function
- see|comment-box-configuration|)

Examples:
>
    -- A left aligned line:
    :CBline
    -- or
    :lua require("comment-box").line()

    -- A centered line:
    :CBcline
    -- or
    :lua require("comment-box").cline()

    -- A right aligned line using the style 6 from the catalog:
    :CBrline6
    -- or
    :lua require("comment-box").rline(6)
<

KEYBINDINGS EXAMPLES                            *comment-box-keybindings_examples*

VIM SCRIPT:                                              *comment-box-vim_script:*
>
    #left aligned fixed size box with left aligned text
    nnoremap <Leader>bb <Cmd>lua require('comment-box').llbox()<CR>
    vnoremap <Leader>bb <Cmd>lua require('comment-box').llbox()<CR>

    # centered adapted box
    nnoremap <Leader>bc <Cmd>lua require('comment-box').acbox()<CR>
    vnoremap <Leader>bc <Cmd>lua require('comment-box').acbox()<CR>

    # centered line
    nnoremap <Leader>bl <Cmd>lua require('comment-box').cline()<CR>
    inoremap <M-l> <Cmd>lua require('comment-box').cline()<CR>
<

LUA                                                              *comment-box-lua*
>
    local keymap = vim.keymap.set
    local cb = require("comment-box")

    -- left aligned fixed size box with left aligned text
    keymap({ "n", "v"}, "<Leader>bb", cb.llbox, {})
    -- centered adapted box
    keymap({ "n", "v"}, "<Leader>bc", cb.acbox, {})

    -- centered line
    keymap("n", "<Leader>bl", cb.cline, {})
    keymap("i", "<M-l>", cb.cline, {})
<

--------------------------------------------------------------------------------
THE CATALOG                                                  *comment-box-catalog*



The catalog is a collection of 22 predefined types of boxes and 10 types of
lines. You can easily access the catalog in Neovim (it will appear in a popup
window so it won't mess with what you're doing) using:
>
    :CBcatalog
    -- or
    :lua require("comment-box").catalog()
<

Just take note of the number of the type of box or line you want to use, close
the catalog and pass the number to the function. For example:
>
    -- A box with the text centered and the predefined type of box n°10:
    :CBcbox10
    -- or
    :lua require("comment-box").cbox(10)
    -- A line with the predefined type of line n°4:
    :CBline4
    -- or
    :lua require("comment-box").line(4)
<

Or if you found one (or more) you will frequently use, you may want to include
it in you keybindings.

Note: in addition to the usual way of closing windows, you can simply use `q` to
close the catalog.

The type n°1 for the box and line is the default one, so, if you didn't change
the default settings via the `setup()` function (see 
|comment-box-configuration|), passing nothing or 1 (or even 0) will lead to the
same result.

--------------------------------------------------------------------------------
CONFIGURATION AND CREATING YOUR OWN TYPE OF BOX        *comment-box-configuration*

You can call the `setup()` function in your init.lua(.vim) to configure the way
comment-box does its things. This is also where you can create your own type of
box. Here is the list of the options with their default value:
>
    require('comment-box').setup({
	    doc_width = 80, -- width of the document
    	box_width = 60, -- width of the boxex
    	borders = { -- symbols used to draw a box
    		top = "─",
    		bottom = "─",
    		left = "│",
    		right = "│",
    		top_left = "╭",
    		top_right = "╮",
    		bottom_left = "╰",
    		bottom_right = "╯",
    	},
      line_width = 70, -- width of the lines
      line = { -- symbols used to draw a line
    		line = "─",
    		line_start = "─",
    		line_end = "─",
                titled_left = "─",
                titled_right = "─",
        }
      outer_blank_lines_above = false, -- insert a blank line above the box
      outer_blank_lines_below = false, -- insert a blank line below the box
      inner_blank_lines = false, -- insert a blank line above and below the text
      line_blank_line_above = false, -- insert a blank line above the line
      line_blank_line_below = false, -- insert a blank line below the line
    })
<

`doc_width`                                                *comment-box-doc_width*

Width of the document. It is used to center the boxes and lines and determine the max width of the adapted boxes.

'box_width'                                                *comment-box-box_width*

Width of the fixed size boxes (must be <= 'doc_width').

'borders'                                                    *comment-box-borders*

The symbols used to draw the boxes. Let your creativity go wild! Or just use the
default or choose from the predefined ones (see |comment-box-catalog|).

If you want an element of the box to be invisible, you can use either `" "`(space)
or `""`(empty string).

'line_width'                                              *comment-box-line_width*

Width of the lines.

'line'                                                          *comment-box-line*

The symbols used to draw the lines. Let your creativity go wild! Or just use the
default or choose from the predefined ones (see |comment-box-catalog|).

'outer_blank_lines_above'                    *comment-box-outer_blank_lines_above*
'outer_blank_lines_below'                    *comment-box-outer_blank_lines_below*

Insert blank lines outside the box, above and below.

'inner_blank_lines'                                *comment-box-inner_blank_lines*

Insert blank lines inside the box, above and below the text.

'line_blank_line_above'                        *comment-box-line_blank_line_above*

Insert a blank line above the drawn line.

'line_blank_line_below'                        *comment-box-line_blank_line_below*

Insert a blank line below the drawn line.

--------------------------------------------------------------------------------
ABOUT                                                         *comment-box-about*

Find the latest version of comment-box at:
https://github.com/LudoPinelli/comment-box.nvim

--------------------------------------------------------------------------------
LICENSE                                                     *comment-box-license*

comment-box is released under the MIT License
https://mit-license.org/
